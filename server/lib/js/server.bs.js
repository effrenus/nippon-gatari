// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Express = require("bs-express/lib/js/src/Express.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Compression = require("compression");
var ReactApollo = require("react-apollo");
var EmotionServer = require("emotion-server");
var Server = require("react-dom/server");
var Template$Renderer = require("./Template.bs.js");
var App$NipponGatariClient = require("nippon-gatari-client/lib/js/src/App.bs.js");
var Router$NipponGatariClient = require("nippon-gatari-client/lib/js/src/Router.bs.js");
var GqlClient$NipponGatariClient = require("nippon-gatari-client/lib/js/src/GqlClient.bs.js");

var app = Express.App[/* make */17](/* () */0);

Express.App[/* use */0](app, Compression());

Express.App[/* get */4](app, "/assets/*", Express.Static[/* asMiddleware */13](Express.Static[/* make */12]("./", Express.Static[/* defaultOptions */0](/* () */0))));

Express.App[/* get */4](app, "/*", Express.PromiseMiddleware[/* from */0]((function (_next, req, res) {
            var clientApp = ReasonReact.element(undefined, undefined, App$NipponGatariClient.make((function (param) {
                        return Router$NipponGatariClient.makeUrl(Express.Request[/* path */16](req));
                      }), /* array */[]));
            return ReactApollo.getDataFromTree(clientApp).then((function (param) {
                            return Promise.resolve(Express.Response[/* sendString */2](Template$Renderer.render(EmotionServer.renderStylesToString(Server.renderToString(clientApp)), Caml_option.undefined_to_opt(JSON.stringify(GqlClient$NipponGatariClient.instance.extract()))), res));
                          })).catch((function (err) {
                          return Promise.resolve(Express.Response[/* sendString */2](Template$Renderer.renderErrorPage(err), res));
                        }));
          })));

Express.App[/* listen */21](app, 8100, undefined, /* () */0);

var Client = 0;

exports.Client = Client;
exports.app = app;
/* app Not a pure module */
